
                        Scheme Scripting
                        ----------------

                    Linas Vepstas, May 2008


This directory contains an experimental, rather broken binding to
the scheme programming language, via guile. Scheme is a lisp dialect.
This binding is intended to be used for day-to-day maintenance 
activities, and for experimentation. it is not meant to be used 
for any sort of serious calculation, simply because it is not
(and cannot be) a high-performance interface. Guile is an interpreter,
not a compiler, and so will never have the performance of compiled code.


Functions:

	cog-new-node node-type node-name 
      Create a new node of the given type and name
      Example:
          (cog-new-node 'ConceptNode "some node name")
          creates a new node, and prints its value:
          node[3:some node name] sti:(0,0) tv:(0.000000,0.000000)
      Throws errors if node-type is not a valide atom type for a node,
      and if node-name is not a string.


   cog-new-link link-type atom-list
      Create a new link, with the given atoms in the link.
      Example:
          (define x (cog-new-node 'ConceptNode "abc"))
          (define y (cog-new-node 'ConceptNode "def"))
          (cog-new-link 'Link (list x y))

          creates a new link, and prints it:
          link[2 sti:(0,0) tv:(0.000000,0.000000) <[3 abc],[3 def]>]
      
   cog-atom handle
       Reference the atom identified by the numeric handle
       Example:
          (cog-atom 4444) 
          prints the atom associated with handle 4444.




