                    query
                    -----

Simple, experimental implementation of query processing
pre-prototype, broken, doesn't do anything yet.

Conceptual problems, design problems:
-------------------------------------
-- How to distinguish rhetorical questions from queries that should
   be answered?  A block of input text may contain rhetorical questions,
   which should be ignored.

-- How should query processing be triggered?  What channel should be 
   used for reply? Currently, all input to CogServer is via XML, which 
   is parsed. If the parse is successful, no further processing is done. 

   Query processing could be performed by a mind agent, but how should
   its activity be triggered, and what communictations channel should
   it use to post a reply?


Diary and Notes
---------------
Use special token to trigger mind agent. Per Ben, "DialogManager",
there are for such tokens:
-- query
-- statement
-- command
-- interjection

Right now, all four of these will be surrounded by an AssertionLink.
The query processor will look for  these, perform some basic sentence
analysis, and dispose of these as appropriate (i.e. generating an
appropriate reply).

Hmmm .. queries need to be morphed into predicates !?
i.e. use a PredicateNode, and an EvalLink

The Basic Algorithm
-------------------
The basic idea is to treat the query as a graph, in which are embedded
one or more unknowns. This query graph can be loosely understood to be
a predicate, with the unknowns corresponding to the bound variables of
the predicate.

The goal of query processing is to scan the collection of all knowledge,
looking for a subgraph that matches the predicate. The nodes that fit
where the unknowns would go are then the answer to the query.

The problem of finding certain subgraphs within graphs is known as the
"Subgraph Isomorphism Problem", and one uses a "Subgraph Isomorphism
Algorithm" to find the match.

