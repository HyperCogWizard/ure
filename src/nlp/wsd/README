
                      Word Sense Disambiguation
                      -------------------------
                           Working Notes 
                      Linas Vepstas April 2008


This document contains working notes for the mapping of wordnet ideas
onto opencog structures. It also describes how words in a parsed
sentence are associated with different word senses.


Word senses or word concepts
----------------------------
Associated with every word is a list of possible senses.
Consider the word "bark", thus:

    <WordNode name="bark" />   -- a word.

A "word sense" is a collection of information about a single semantic
sense of a word. This bag includes information about the part-of-speech
(noun, verb, etc.), example usages, pointers to synonym sets (synsets),
hyponyms, hypernyms, etc. A specific "word sense" will be tagged with a
unique identifier, which is then used to reference that sense.

In the opencog type heirarchy, (type.script)
   WORD_SENSE_LINK <- ASSOCIATIVE_LINK

A WordSenseLink couples the tag that will stand for the word sense,
to the word itself:

   <WordSenseLink>
      <WordNode name="bark" />
      <ConceptNode name="bark_sense_23" />
   </WordSenseLink>

The tag value "bark_sense_23" has no particular meaning in itself,
it is just some unique string used to identify the sense.

Word senses can be crudely categorized according to part-of-speech.
Thus, for example:

   <PartOfSpeechLink>
      <ConceptNode name="bark_sense_23" />
      <PartOfSpeechNode name="noun" />
   </PartOfSpeechLink>

The above introduces a new node type "PartOfSpeechNode", and a new link
type: "PartOfSpeechLink".  Other possible properties might include gender,
entity tags, and so on. This
potentially leads to an explosion of special-purpose nodes. For
example, there are over a dozen commmonly employed in RelEx, and
more are occasionally added to suit particular needs.  To avoid
this explosion, the following syntax can be used:

   PROPERTY_LINK <- ORDERED_LINK
   PROPERTY_NAME_NODE <- NODE
   PROPERTY_VALUE_NODE <- NODE

   <WordSenseLink>
      <WordNode name="bark" />
      <PropertyLink>
        <PropertyNameNode name="PartOfSpeech" />
        <PropertyValueNode name="noun" />
      </PropertyLink/>
   </WordSenseLink>


An alternate notation, perhaps more in line with traditional PLN,
is

   <EvaluationLink>
     <ConceptNode name="PartOfSpeech"/>
     <ListLink>
       <WordSenseNode name="bark_sense_23" />
       <ConceptNode name="noun" />



Each of these nodes and links are assigned a truth value of 1 and a
confidence of 1. Non-unit truthvalues & confidence will be used when 
relating word senses to the use of actual words in sentences. Here, 
however, the goal is to state "this word does have this as one possible
meaning, no matter how rarely used this meaing might be."

In wordnet, word senses are commonly established by giving "sister
terms" (a wordnet concept, equivalent to "synonyms for word senses")
as well as hypernyms, hyponyms, part holonyms, etc. A sister term,
hypernym, hyponym, etc. are thus links. Since some sister terms are 
closer than others, these links will have non-unit truth values. 

Hypernyms and hyponyms will be mapped to inheritence links.
Thus:

   HYPERNYM_LINK <- CONCEPT_LINK
   HYPONYM_LINK <- CONCEPT_LINK

   <WordSenseLink>
      <WordNode name="bark" />
      <PartOfSpeechNode name="noun" />
      <HypernymLink strength=0.8 confidence=0.9 />
         <WordSenseLink>
            <WordNode name="covering" />
         </WordSenseLink>
      </HypernymLink>
      <HyponymLink strength=0.8 confidence=0.9 />
         <WordSenseLink>
            <WordNode name="cork" />
         </WordSenseLink>
      </HyponymLink>
   </WordSenseLink>

The above indicates that "bark" is a kind of "covering", and that 
"cork" is a kind of bark. Note that the hyper/hypo links link not
to word nodes, but to other word-sense links.  There may be many 
hypo/hyper links in a word sense.

There is a potential confusion as to the idea of a "synonym", as 
some synonyms are better than others. In an attempt to avoid this
confusion, and stay close to the wordnet idea of a "sister term", 
these will be called Sibnym's (sibling nyms). The idea of a synonym 
will be reserved for relations between words, rather than relations 
between concepts.

Thus:

   SIBNYM_LINK <- CONCEPT_LINK
 
Wordnet uses the idea of "part holonyms", which is mirrored here.
Thus:

   HOLONYM_LINK <- CONCEPT_LINK
   MERONYM_LINK <- CONCEPT_LINK

To continue with the tree-bark example:

   <WordSenseLink>
      <WordNode name="bark" />
      <PartOfSpeechNode name="noun" />
      <HolonymLink strength=0.8 confidence=0.9>
         <WordSenseLink>
            <WordNode name="branch" />  <!-- bark is a part of a branch -->
         </WordSenseLink>
      </HolonymLink>
      <MeronymLink strength=0.8 confidence=0.9>
         <WordSenseLink>
            <WordNode name="lignin" />  <!-- bark is composed of lignin -->
         </WordSenseLink>
      </MeronymLink>
   </WordSenseLink>

Commentary
----------
Note that the WordSenseLink "bag of parts" was not endowed with a unique
identifier of some sort. That is, it did not contain a node resembling
the following:

   <ConceptNode name="bark_6372">

to label this particular word sense with the universal-unique label
"bark_6372".  There does not appear to be any reason (at this time) to
provide such a label.


Sentences to meanings
---------------------
Consider two sentences: "The loud bark woke me up." or "The rough bark
cut my finger." The goal of word-sense disambiguation is two-fold:
associate to all possible meanings of the word bark, and then, pick the
most likely meaning.

There are three things to distinguish: the word instance, as it occurs
in the sentence, the word sense, as described above, and the concept 
the word represents. The "word concept" is distinguished from the "word
sense", as being the concept within context of the sentence/text in 
which it appears. Thus, "We stood in the yard.  As she walked up to me,
I laid my hand on the old oak.  Its rough bark cut my finger."  The goal
is to distingusih the word-instance "bark", from the most likely
word-sense of "tree bark", from the concept "the bark of an oak tree in
a particular yard in which there are two people".

The distinction between the word instance and the concept is
accomplished by using WordInstanceNode and ConceptNode.

------
The current RelEx output is as follows, but this seems wrong, in light 
of the above discussions.

   <InheritanceLink>
      <WordInstanceNode name="bark_1234" />
      <ConceptNode name="bark_1" />
   </InheritanceLink>

   <ReferenceLink>
      <WordNode name="#bark">
      <ConceptNode = "bark_1">  <!-- the generic tree-bark concept -->
   </ReferenceLink>

One problem is the missing notion of the specific concept of the 
bark of a particular tree.  Another problem is that the generic 
tree-bark concept is refered to by a label "bark_1", yet, there
is no need to refer to it directly. Next, RelEx is not in a position
to guess whether or not a specific word-instance refers to a word sense;
this must be defered until after a word-sense disambiguation step.
And, of course, Relex is not in a position to guess at the specific
concept either.  These problems are remedied by the structure below.

------

XXXXXXXXXXXXXXXXXXXXXXX
Unfinished ... will do tommorrow.

RelEx should generate the following:

   <ReferenceLink>
      <WordInstanceNode name="bark_1234" />
      <WordNode name="#bark">
   </ReferenceLink>

The word-instance is tagged with a universal unique ID of "1234" for 
record-keeping purposes; it captures the notion that this is a specific
word in a specific sentence.  Word properties are given as:

   <InheritanceLink>
      <DefinedLinguisticConceptNode name="#pos#noun" />
      <WordInstanceNode name="bark_1234" />
   </InheritanceLink>

An alternative representation would be to use a word instance link, as 
opposed to a node. Thus, 

  <WordInstanceLink>
      <WordNode name="#bark">
      <DefinedLinguisticConceptNode name="#pos#noun" />
      <DefinedLinguisticConceptNode name="#count#uncountable" />
  </WordInstanceLink>

XXXX Maybe this is wrong .. 
  


-------------


XXX Ignore the flow. Its what the current code generates.


