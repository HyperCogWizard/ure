
                      Word Sense Disambiguation
                      -------------------------
                           Working Notes 
                      Linas Vepstas April 2008


This document contains working notes for the mapping of wordnet ideas
onto opencog structures. It also describes how words in a parsed
sentence are associated with different word senses.


Word senses or word concepts
----------------------------
Associated with every word is a list of possible senses.
Consider the word "bark", thus:

    <WordNode name="bark" />   -- a word.

A "word sense" is a collection of information about a single semantic
sense of a word. This bag includes information about the part-of-speech
(noun, verb, etc.), example usages, pointers to synonym sets (synsets),
hyponyms, hypernyms, etc. A specific "word sense" will be tagged with a
unique identifier, which is then used to reference that sense.

In the opencog type heirarchy, (type.script)
   WORD_SENSE_LINK <- ASSOCIATIVE_LINK

A WordSenseLink couples the tag that will stand for the word sense,
to the word itself:

   <WordSenseLink>
      <WordNode name="bark" />
      <ConceptNode name="bark_sense_23" />
   </WordSenseLink>

The tag value "bark_sense_23" has no particular meaning in itself,
it is just some unique string used to identify the sense.

Word senses can be crudely categorized according to part-of-speech.
Thus, for example:

   <PartOfSpeechLink>
      <ConceptNode name="bark_sense_23" />
      <PartOfSpeechNode name="noun" />
   </PartOfSpeechLink>

The above introduces a new node type "PartOfSpeechNode", and a new link
type: "PartOfSpeechLink".  Other possible properties might include gender,
entity tags, and so on. This potentially leads to an explosion of 
special-purpose nodes. For example, there are over a dozen properties
that RelEx uses to tag words.  To avoid this explosion, the following 
syntax will be used:

   <EvaluationLink>
     <PredicateNode name="PartOfSpeech"/>
     <ListLink>
       <ConceptNode name="bark_sense_23" />
       <ConceptNode name="noun" />
     </ListLink>
   </EvaluationLink>

[[The above specifies a triple that is to be associated together.
Another possible way of denoting a triple might have been:

   <PropertyLink>
     <ConceptNode name="bark_sense_23" />
     <ListLink>
       <ConceptNode name="PartOfSpeech"/>
       <ConceptNode name="noun" />
     </ListLink>
   </PropertyLink>

but this would require the invention of a new link type, "PropertyLink",
which other parts of the system are unaware of. Alternately, 

   <MemberLink>
     <ListLink>
       <ConceptNode name="PartOfSpeech"/>
       <ConceptNode name="noun" />
     </ListLink>
     <ConceptNode name="bark_sense_23" />
   </MemberLink>

could be useful, but this would loose the benefit of the predicate form.
A predicate could still be created later, by making use of a link from
the predicate name to a SatisfyingSetLink. ]]

Each of these nodes and links are assigned a truth value of 1 and a
confidence of 1. Non-unit truthvalues & confidence will be used when 
relating word senses to the use of actual words in sentences. Here, 
however, the goal is to state "this word does have this as one possible
meaning, no matter how rarely used this meaing might be."

In wordnet, word senses are commonly established by giving "sister
terms" (a wordnet concept, equivalent to "synonyms for word senses")
as well as hypernyms, hyponyms, part holonyms, etc. A sister term,
hypernym, hyponym, etc. are thus links. Since some sister terms are 
closer than others, these links will have non-unit truth values. 

Hypernyms and hyponyms will be mapped to inheritence links.
A hypernym for the wood-bark is that it is a covering of something:

   <InheritanceLink strength=0.8 confidence=0.9 />
      <WordSenseNode name="bark_sense_23" />
      <WordSenceNode name="covering_sense_42" />
   </InheritanceLink>

A hyponym for wood-bark is that cork is a kind of bark:

   <InheritanceLink strength=0.8 confidence=0.9 />
      <WordSenceNode name="cork_sense_98" />
      <WordSenseNode name="bark_sense_23" />
   </InheritanceLink>

Note the reversed order between the hypo- and hyper- representations.


Wordnet uses the phrase "sister term" instead of "synonym" to relate 
similar word senses. Wordnet reserves the use of "synonym" for relating
words, not word senses. Related word senses will be linked with
SimilarityLinks

   SIMILARITY_LINK <- UNORDERED_LINK

Wordnet includes the idea of "part holonyms", that something is a part
of something else, and its converse, the meronym, that something is
composed of parts.  

   PART_OF_LINK <- INHERITANCE_LINK

[[Making the part-of link derive from inheritance link seems dangerous,
since wordnet does distinguish is-a and kind-of relations, whereas the
above mapping erases it. This may need to be fixed. ]]

To continue with the tree-bark example:

   <!-- bark is a part of a branch -->
   <PartOfLink strength=0.8 confidence=0.9>
      <WordSenseNode name="bark_sense_23" />
      <WordSenseNode name="branch_sense_2" />
   </PartOfLink>

   <!-- bark is composed of lignin -->
   <PartOfLink strength=0.8 confidence=0.9>
      <WordSenseNode name="lignin_sense_1" />
      <WordSenseNode name="bark_sense_23" />
   </PartOfLink>

Finally, wordnet has the concpt of "instance-of" relations.  These
will use InstanceLinks:

   INSTANCE_LINK <- ORDERED_LINK


Sentences to meanings
---------------------
Consider two sentences: "The loud bark woke me up." or "The rough bark
cut my finger." The goal of word-sense disambiguation is two-fold:
associate to all possible meanings of the word "bark", and then, rank
the possible meanings from most likely to least.

There are four things to distinguish: the first two are the word
instance, as it occurs in the sentence, and the word sense, as 
described above. Third is the "word concept", the linkage of a word
sense to a word instance.  The "word concept" is distinguished from the
"word sense", as being a particular word sense within context of the 
sentence in which it appears. Finally, there is a "text concept", which
is loosely a specific word sense, as it appears in a text of multiple
sentences.  It is an aglomeration of the word concepts in different 
sentences.

Thus, consider the example text: "We stood in the yard.  As she walked
up to me, I laid my hand on the old oak.  Its rough bark cut my finger."
This sentence contains the word-instance "bark". From WordNet, we know
that there are many word-senses for "bark". The word-concept would be 
a linakge from the word-instance "bark" to the sense of "tree bark";
the goal of word-sense disambiguation is to give this particular 
word-concept a high probability and a high confidence.  Lastly, there
is the text concept. In this case, the text concept can be deduced to
be "the bark of an oak tree in a particular yard in which there are two
people".


------
The current RelEx output is as follows, but this seems wrong, in light 
of the above discussions.

   <InheritanceLink>
      <WordInstanceNode name="bark_1234" />
      <ConceptNode name="bark_1" />
   </InheritanceLink>

   <ReferenceLink>
      <WordNode name="#bark">
      <ConceptNode = "bark_1">  <!-- the generic tree-bark concept -->
   </ReferenceLink>

One problem is the missing notion of the specific concept of the 
bark of a particular tree.  Another problem is that the generic 
tree-bark concept is refered to by a label "bark_1", yet, there
is no need to refer to it directly. Next, RelEx is not in a position
to guess whether or not a specific word-instance refers to a word sense;
this must be defered until after a word-sense disambiguation step.
And, of course, Relex is not in a position to guess at the specific
concept either.  These problems are remedied by the structure below.

------

XXXXXXXXXXXXXXXXXXXXXXX
Unfinished ... will do tommorrow.

RelEx should generate the following:

   <ReferenceLink>
      <WordInstanceNode name="bark_1234" />
      <WordNode name="#bark">
   </ReferenceLink>

The word-instance is tagged with a universal unique ID of "1234" for 
record-keeping purposes; it captures the notion that this is a specific
word in a specific sentence.  Word properties are given as:

   <InheritanceLink>
      <DefinedLinguisticConceptNode name="#pos#noun" />
      <WordInstanceNode name="bark_1234" />
   </InheritanceLink>

An alternative representation would be to use a word instance link, as 
opposed to a node. Thus, 

  <WordInstanceLink>
      <WordNode name="#bark">
      <DefinedLinguisticConceptNode name="#pos#noun" />
      <DefinedLinguisticConceptNode name="#count#uncountable" />
  </WordInstanceLink>

XXXX Maybe this is wrong .. 
  


-------------


XXX Ignore the flow. Its what the current code generates.


