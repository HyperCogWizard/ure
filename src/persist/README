                          Persist
                          -------

A trivial, simple-minded implementation of atom persistence. 

STATUS:
Incomplete prototype. Save and restore of atoms, but not 
truth values, works. Interaction with TLB not handled.

Goals:
------
The goal of this implementation is to:
1) Simplify Linas' day-to-day use of opencog. The problem is that
   loading data, by parsing english sentences, into opencog is slow.
   Every time opencog source is changed, the data needs to be reloaded.
   This makes development tedious.  The hope is that data persistence
   will aleviate data load time.

2) Make sure that the opencog core desisgn is amenable to data
   persistence, including locks, use counts, etc.  This prototype
   should lay the foundations for more sophisticated schemes to take
   its place.

3) Provide a baseline/reference implementation by which other 
   persistence designs can be measured.

Design:
-------
The core design will use a few very simple SQL tables, and some
simple readers and writers to save and restore atoms from an SQL 
database.

Note that the core design does *not* make use of object reflection, 
nor can it store arbitrary kinds of objects. It is very definitely 
hard-wired. Yes, this can be considered to be a short-coming. 
A more general, persistent object framework (for C) can be found 
at http://estron.alioth.debian.org/ 

Caveats:
--------
Its not at all clear whether this is a good idea; there are several
major drawbacks to using SQL. These include:
-- Large performance overhead, even if an embedded SQL server is used.
-- Potentially large churn, as opencog creates many short-lived atoms,
   which shouldn't be persisted.

Getting started
---------------
Create a database called "OpenCog"; for example, in postgres, at
the unix command line:

	$ createdb opencog

(you may need to su - postgres; creastureuser <username> first)

Then create the database tables:

   $ cat atom.sql | psql opencog

Next, set up the correct ODBC connection. This version uses iODBC
So edit .odbc.ini in your home directory, and add a stanza similar
to this, adjusting for user and passwd appropriately.  The password
to be supplied is the database password, not the user password.
The database password can be set by doing:

   $ psql -c "ALTER USER linas WITH PASSWORD 'asdf'" -d template1

[opencog]
Description    = PostgreSQL
Driver      = PostgreSQL
Trace    = No
TraceFile      =
Database    = opencog
Servername     = localhost
Port     = 5433
Username    = linas
Password    = asdf
ReadOnly    = No
RowVersioning     = No
ShowSystemTables     = Yes
ShowOidColumn     = Yes
FakeOidIndex      = Yes
ConnSettings      =


