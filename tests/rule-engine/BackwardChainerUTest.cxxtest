/*
 * BackwardChainerUTest.cxxtest
 *
 *  Created on: Oct 20, 2014
 *      Author: misgana
 */
#include <opencog/rule-engine/backwardchainer/BackwardChainer.h>
#include <opencog/rule-engine/backwardchainer/BackwardChainerPMCB.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/pattern/PatternLink.h>
#include <opencog/util/mt19937ar.h>

using namespace opencog;
//#define DEBUG 1

#define al as_.add_link
#define an as_.add_node

class BackwardChainerUTest: public CxxTest::TestSuite
{
private:
	AtomSpace as_;
	SchemeEval eval_;
	BackwardChainer * bc_;

public:
	BackwardChainerUTest() : eval_(&as_)
	{
		logger().set_level(Logger::DEBUG);
		logger().set_timestamp_flag(false);
		// logger().set_sync_flag(true);
		logger().set_print_to_stdout_flag(true);
		randGen().seed(0);
	}

	void setUp();
	void tearDown();

	void test_implication_instantiation();
	void test_bc_modus_ponens();
	void test_bc_deduction();
	void test_impossible_bc();
	void test_bc_modus_ponens_deduction();
	void test_tvq_bc();
	void test_tvq_impossible_bc();
	void test_focus_set();
	void test_virtual_no_grnd();
};

void BackwardChainerUTest::setUp()
{
	string cur_pp_dir = string(PROJECT_SOURCE_DIR),
		cur_p_dir = cur_pp_dir + "/tests",
		cur_dir = cur_p_dir + "/rule-engine";
	vector<string> load_paths = {cur_pp_dir, cur_p_dir, cur_dir};
	for (string& p : load_paths)
	{
		string eval_str = string("(add-to-load-path \"") + p + string("\")");
		eval_.eval(eval_str);
	}
	eval_.eval("(use-modules (opencog))");
	// eval_.eval("(use-modules (opencog rule-engine))");
}

void BackwardChainerUTest::tearDown()
{
	as_.clear();
}

void BackwardChainerUTest::test_implication_instantiation()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as_.clear();

	string result = eval_.eval("(load-from-path \"tests/rule-engine/implication-instantiation-config.scm\")");

	logger().debug() << "result = " << result;
	
	result = eval_.eval("(load-from-path \"tests/rule-engine/bc-friends.scm\")");
	randGen().seed(0);

	// load 1 modus ponens rule
	Handle top_rbs = as_.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
	BackwardChainer bc(as_, top_rbs);

	Handle are_friends = an(PREDICATE_NODE, "are-friends"),
		john = an(CONCEPT_NODE, "John"),
		mary = an(CONCEPT_NODE, "Mary"),
		edward = an(CONCEPT_NODE, "Edward"),
		cyril = an(CONCEPT_NODE, "Cyril"),
		target_var = an(VARIABLE_NODE, "$what"),
		target = al(EVALUATION_LINK,
		            are_friends,
		            al(LIST_LINK,
		               john,
		               target_var));

	bc.set_target(target);
	bc.get_config().set_maximum_iterations(30);
	bc.do_chain();

	HandleMultimap results = bc.get_chaining_result();

	TS_ASSERT_EQUALS(results[target_var].size(), 3);
	TS_ASSERT_EQUALS(results[target_var].count(mary), 1);
	TS_ASSERT_EQUALS(results[target_var].count(edward), 1);
	TS_ASSERT_EQUALS(results[target_var].count(cyril), 1);

	logger().debug("END TEST: %s", __FUNCTION__);	
}

void BackwardChainerUTest::test_bc_modus_ponens()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as_.clear();

	string result = eval_.eval("(load-from-path \"tests/rule-engine/bc-modus-ponens-config.scm\")");
	std::cout << result << std::endl;
	eval_.eval("(load-from-path \"tests/rule-engine/bc-animals.scm\")");
	randGen().seed(0);

	// load 1 modus ponens rule
	Handle top_rbs = as_.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
	BackwardChainer bc(as_, top_rbs);

	Handle target_var = eval_.eval_h("(VariableNode \"$what\")");
	Handle target =
		eval_.eval_h("(InheritanceLink"
		             "   (VariableNode \"$what\")"
		             "   (ConceptNode \"green\"))");
	Handle soln = eval_.eval_h("(ConceptNode \"Fritz\")");

	bc.set_target(target);
	bc.get_config().set_maximum_iterations(300);
	bc.do_chain();

	HandleMultimap results = bc.get_chaining_result();

	TS_ASSERT_EQUALS(results[target_var].size(), 2);
	TS_ASSERT_EQUALS(results[target_var].count(soln), 1);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_bc_deduction()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as_.clear();

	eval_.eval("(load-from-path \"tests/rule-engine/bc-deduction-config.scm\")");
	eval_.eval("(load-from-path \"tests/rule-engine/bc-transitive-closure.scm\")");
	randGen().seed(0);

	// load 1 deduction rule
	Handle top_rbs = as_.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
	BackwardChainer bc(as_, top_rbs);

	Handle target_var = eval_.eval_h("(Variable \"$X\")");
	Handle target = eval_.eval_h("(Inheritance"
	                             "   (Concept \"A\")"
	                             "   (Variable \"$X\"))");
	Handle B = eval_.eval_h("(Concept \"B\")");
	Handle C = eval_.eval_h("(Concept \"C\")");
	Handle D = eval_.eval_h("(Concept \"D\")");

	bc.set_target(target);
	bc.get_config().set_maximum_iterations(100);
	bc.do_chain();

	HandleMultimap results = bc.get_chaining_result();

	TS_ASSERT_EQUALS(results[target_var].size(), 3);
	TS_ASSERT_EQUALS(results[target_var].count(B), 1);
	TS_ASSERT_EQUALS(results[target_var].count(C), 1);
	TS_ASSERT_EQUALS(results[target_var].count(D), 1);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_impossible_bc()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as_.clear();

	eval_.eval("(load-from-path \"tests/rule-engine/bc-modus-ponens-config.scm\")");
	eval_.eval("(load-from-path \"tests/rule-engine/bc-criminal.scm\")");
	randGen().seed(0);

	// load modus ponens rule
	Handle top_rbs = as_.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
	BackwardChainer bc(as_, top_rbs);

	Handle target_var = eval_.eval_h("(VariableNode \"$who\")");
	Handle target =
	    eval_.eval_h("(InheritanceLink"
	                 "   (VariableNode \"$who\")"
	                 "   (ConceptNode \"criminal\"))");
	Handle soln = eval_.eval_h("(ConceptNode \"West\")");

	// should NOT be possible to find the solution without deduction rule
	bc.set_target(target);
	bc.get_config().set_maximum_iterations(1000);
	bc.do_chain();

	HandleMultimap results = bc.get_chaining_result();

	TSM_ASSERT("Incorrect number of solution found!",
	           results[target_var].size() == 1);
	TSM_ASSERT("Getting impossible solution!",
	           results[target_var].count(soln) == 0);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_bc_modus_ponens_deduction()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as_.clear();

	eval_.eval("(load-from-path \"tests/rule-engine/bc-config.scm\")");
	eval_.eval("(load-from-path \"tests/rule-engine/bc-criminal.scm\")");
	randGen().seed(500);

	// load modus ponens & deduction rules
	Handle top_rbs = as_.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
	BackwardChainer bc(as_, top_rbs);

	Handle target_var = eval_.eval_h("(VariableNode \"$who\")");
	Handle target =
		eval_.eval_h("(InheritanceLink"
		             "   (VariableNode \"$who\")"
		             "   (ConceptNode \"criminal\"))");
	Handle soln = eval_.eval_h("(ConceptNode \"West\")");

	bc.set_target(target);
	bc.get_config().set_maximum_iterations(1000);
	bc.do_chain();

	HandleMultimap results = bc.get_chaining_result();

	TSM_ASSERT("Incorrect number of solution found!",
	           results[target_var].size() == 2);
	TSM_ASSERT("Getting incorrect solution!",
	           results[target_var].count(soln) == 1);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_tvq_bc()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as_.clear();

	eval_.eval("(load-from-path \"tests/rule-engine/bc-modus-ponens-config.scm\")");
	eval_.eval("(load-from-path \"tests/rule-engine/bc-animals.scm\")");
	randGen().seed(500);

	// load modus ponens
	Handle top_rbs = as_.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
	BackwardChainer bc(as_, top_rbs);

	Handle target =
	    eval_.eval_h("(InheritanceLink (stv 0.0 0.0)"
	                 "   (ConceptNode \"Fritz\")"
	                 "   (ConceptNode \"green\"))");

	bc.set_target(target);
	bc.get_config().set_maximum_iterations(300);
	bc.do_chain();

	TSM_ASSERT("Incorrect strength after BC!",
	           target->getTruthValue()->getMean() > 0.9f);
	TSM_ASSERT("Incorrect confidence after BC!",
	           target->getTruthValue()->getConfidence() > 0.9f);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_tvq_impossible_bc()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	// This is kind of crazy, but ... but deleting the forced garbage
	// collection below causes the NEXT unit test to fail!  I don't
	// understand what's at the root of this bug. Some weird
	// indeterminism?
	eval_.eval("(gc)");
	as_.clear();

	eval_.eval("(load-from-path \"tests/rule-engine/bc-modus-ponens-config.scm\")");
	eval_.eval("(load-from-path \"tests/rule-engine/bc-animals.scm\")");
	randGen().seed(0);

	// load modus ponens
	Handle top_rbs = as_.add_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
	BackwardChainer bc(as_, top_rbs);

	// negative test, BC should not modify the TV of this impossible target
	Handle target = eval_.eval_h("(InheritanceLink (stv 0.0 0.0)"
	                             "   (ConceptNode \"RandomName\")"
	                             "   (ConceptNode \"green\"))");

	// this is not the target, but the inference path should still actually
	// modify the TV
	Handle hidden = eval_.eval_h("(InheritanceLink (stv 0.0 0.0)"
	                             "   (ConceptNode \"Fritz\")"
	                             "   (ConceptNode \"Frog\"))");

	bc.set_target(target);
	bc.get_config().set_maximum_iterations(300);
	bc.do_chain();

	TSM_ASSERT("Incorrect strength of target after BC!",
	           target->getTruthValue()->getMean() < 0.1f);
	TSM_ASSERT("Incorrect confidence of target after BC!",
	           target->getTruthValue()->getConfidence() < 0.1f);
	TSM_ASSERT("Incorrect strength of sub-target after BC!",
	           hidden->getTruthValue()->getMean() > 0.9f);
	TSM_ASSERT("Incorrect confidence of sub-target after BC!",
	           hidden->getTruthValue()->getConfidence() > 0.9f);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_focus_set()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as_.clear();

	eval_.eval("(load-from-path \"tests/rule-engine/bc-modus-ponens-config.scm\")");
	eval_.eval("(load-from-path \"tests/rule-engine/bc-animals.scm\")");
	randGen().seed(0);

	// load 1 modus ponens rule
	Handle top_rbs = as_.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
	BackwardChainer bc(as_, top_rbs);

	Handle target_var = eval_.eval_h("(VariableNode \"$what\")");
	Handle target =
	        eval_.eval_h("(InheritanceLink"
	                     "   (VariableNode \"$what\")"
	                     "   (ConceptNode \"green\"))");
	Handle focus_set =
	        eval_.eval_h("(SetLink"
	                     " (InheritanceLink"
	                     "   (ConceptNode \"tree\")"
	                     "   (ConceptNode \"plant\"))"
	                     " (ImplicationLink (stv 1.0 1.0)"
	                     "   (InheritanceLink"
	                     "     (VariableNode \"$P\")"
	                     "     (ConceptNode \"plant\")"
	                     "   )"
	                     "   (InheritanceLink"
	                     "     (VariableNode \"$P\")"
	                     "     (ConceptNode \"green\")"
	                     "   )"
	                     " )"
	                     ")");
	Handle soln1 = eval_.eval_h("(ConceptNode \"tree\")");

	// should not be able to find this solution outside the focus set
	Handle soln2 = eval_.eval_h("(ConceptNode \"Fritz\")");

	bc.set_target(target, focus_set);
	bc.get_config().set_maximum_iterations(300);
	bc.do_chain();

	HandleMultimap results = bc.get_chaining_result();

	TS_ASSERT_EQUALS(results[target_var].size(), 2);
	TS_ASSERT_EQUALS(results[target_var].count(soln1), 1);
	TS_ASSERT_EQUALS(results[target_var].count(soln2), 0);

	logger().debug("END TEST: %s", __FUNCTION__);
}

/**
 * Test the following pattern using the BackwardChainerPMCB
 *
 * (AndLink
 *   (InheritanceLink
 *     (ConceptNode "A")
 *     (VariableNode "$X")
 *   )
 *   (InheritanceLink
 *     (VariableNode "$X")
 *     (VariableNode "$Y")
 *   )
 *   (NotLink
 *     (IdenticalLink
 *       (ConceptNode "A")
 *       (VariableNode "$Y")
 *     )
 *   )
 * )
 *
 * on the the following data:
 *
 * (InheritanceLink
 *  (ConceptNode "A")
 *   (ConceptNode "B")
 * )/
*
 * (InheritanceLink
 *   (ConceptNode "A")
 *   (VariableNode "$X")
 * )
 *
 * (InheritanceLink
 *   (ConceptNode "B")
 *   (ConceptNode "C")
 * )
 *
 */
void BackwardChainerUTest::test_virtual_no_grnd()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	as_.clear();

	// Define the pattern to match against.
	Handle
		A = an(CONCEPT_NODE, "A"),
		B = an(CONCEPT_NODE, "B"),
		C = an(CONCEPT_NODE, "C"),
		X = an(VARIABLE_NODE, "$X"),
		Y = an(VARIABLE_NODE, "$Y"),
		AX = al(INHERITANCE_LINK, A, X),
		XY = al(INHERITANCE_LINK, X, Y),
		NotIdAY = al(NOT_LINK, al(IDENTICAL_LINK, A, Y)),
		AB = al(INHERITANCE_LINK, A, B),
		BC = al(INHERITANCE_LINK, B, C),
		Concept = an(TYPE_NODE, "ConceptNode"),
		vardecl = al(VARIABLE_LIST,
		             al(TYPED_VARIABLE_LINK, X, Concept),
		             al(TYPED_VARIABLE_LINK, Y, Concept)),
		body = al(AND_LINK, AX, XY, NotIdAY),
		pattern = al(PATTERN_LINK, vardecl, body);

	PatternLinkPtr sl(PatternLinkCast(pattern));
	BackwardChainerPMCB pmcb(&as_, VariableListCast(vardecl), true);
	sl->satisfy(pmcb);

	const HandleMapSeq& var_solns = pmcb.get_var_list();
	const HandleMapSeq& pred_solns = pmcb.get_pred_list();

	TS_ASSERT_EQUALS(var_solns.size(), 1);
	TS_ASSERT_EQUALS(var_solns.front().size(), 2);
	TS_ASSERT_EQUALS(var_solns.front().at(X), B);
	TS_ASSERT_EQUALS(var_solns.front().at(Y), C);

	TS_ASSERT_EQUALS(pred_solns.size(), 1);
	TS_ASSERT_EQUALS(pred_solns.front().size(), 2);
	TS_ASSERT_EQUALS(pred_solns.front().at(AX), AB);
	TS_ASSERT_EQUALS(pred_solns.front().at(XY), BC);

	logger().debug("END TEST: %s", __FUNCTION__);
}

#undef al
#undef an
