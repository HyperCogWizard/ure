PARSE MODULE

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXX This code is obsolescent/mis-operational; at this time, it is 
incompaible with the rest of the OpenCog NLP processing pipeline.
Do not use this code. The correct way of hooking up NLP to OpenCog
is detailed in the nlp/chatbot/README file, which demonstrates how 
to get parsed sentences routed into OpenCog, so as to support a simple
question-answering chatbot.  XXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


This is a parse module, it looks for SentenceNodes and parses them with
link-grammar.  This creates one or more ParseNodes which are linked to the 
SentenceNode by a ParseLink.  HolonymLinked to the ParseNode is a ListLink of
WordNodeInstances, one for each word tokenized by link-grammar, each of which
is ExtInhLinked to the WordNode that it is an instance of.  The ListLink also
contains a node ExtInhLinked to the LEFT-WALL ConceptNode at its start and a 
node ExtInhLinked to the RIGHT-WALL ConceptNode at its end.  

Additionally, all links generated by link-grammar are represented as 
LinkGrammarRelationshipNodes named by the link-grammar link label.  An 
EvaluationLink is linked from each to a ListLink linking to the left and right 
WordNodeInstance (or the node ExtInhLinked to the LEFT-WALL/RIGHT-WALL 
ConceptNode, as appropriate).

Example of use
--------------

telnet localhost 17001
opencog> loadmodule libparse.so
done
opencog> start-agents opencog::ParsingAgent
Successfully started agents
opencog> hear John threw the ball
1108
opencog> exit

which will produce the debug output (if the module is set to noisy):


    parsing: John threw the ball

            +-----Os----+
      +--Ss-+     +--Ds-+
      |     |     |     |
    John threw.v the ball.n 


The atomspace will produce the graph as described.  In this example, the
AtomSpace will now contain:

    * A SentenceNode "John threw the ball".
    * A ParseNode.
    * 4 WordNodes: "John", "threw", "the" and "ball".
    * An ExtInhLink from a WordInstanceNode to each WordNode.
    * 2 ConceptNodes: "LEFT-WALL" and "RIGHT-WALL".  
    * An ExtInhLink from a Node to each ConceptNode.
    * A ListLink linking the LEFT-WALL Node, each of the WordInstanceNodes in 
      order, and the RIGHT-WALL Node.
    * A HolonymLink from the ListLink to the ParseNode.
    * 3 LinkGrammarRelationshipNodes: "Ss", "Os", "Ds".
    * A ListLink from the "John" WordInstanceNode to the "threw" 
      WordInstanceNode.
    * A EvaluationLink from the ListLink to the Ss Node.
    * A HolonymLink from the EvaluationLink to the ParseNode.
    * A ListLink from the "threw" WordInstanceNode to the "ball" 
      WordInstanceNode.
    * A EvaluationLink from the ListLink to the Os Node.
    * A HolonymLink from the EvaluationLink to the ParseNode.
    * A ListLink from the "the" WordInstanceNode to the "ball" 
      WordInstanceNode.
    * A EvaluationLink from the ListLink to the Ds Node.
    * A HolonymLink from the EvaluationLink to the ParseNode.

So I count:

nodes: 1 1 4 4 2 2     3                        = 17
links:       4   2 1 1   1 1 1 1 1 1 1 1 1      = 17

Which is a fanout of about 6x1.


TODO
----

In the example above you may have noticed the parts-of-speech tagging that 
link-grammar does has not been represented in the graph.  That could be useful.


Trent Waddington 31/1/2009
