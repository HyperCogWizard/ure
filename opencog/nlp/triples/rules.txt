;
; rules.txt
;
; An experimental set of copula/preposition-mangling rules. 
;
; The format of this file is supposed to be simialr to, if not identical
; to the "mapping_rules.txt" file used in the Relex framing code.
;
; Sentence: "Lisbon is the capital of Portugaul"
; var0=Lisbon, var1=capital var2=Portugaul
# IF _subj(be,$var0) ^ _obj(be,$var1)
      ^ $prep($var1,$var2)              ; preposition 
      ^ %LemmaLink($var1,$word1)        ; word of word instance
      ^ $phrase($word1, $prep)          ; convert to phrase
      ^ %WordInstanceLink($var0,$sent)  ; $var0 and $var1 must be
      ^ %WordInstanceLink($var1,$sent)  ; in the same sentence
      THEN ^3_$phrase($var2, $var0) 

; Sentence: "The capital of Germany is Berlin"
; var0=capital, var1=Berlin var2=Germany
# IF _subj(be,$var0) ^ _obj(be,$var1)   ; reversed subj, obj
      ^ $prep($var0,$var2)              ; preposition 
      ^ %LemmaLink($var0,$word0)        ; word of word instance
      ^ $phrase($word0, $prep)          ; convert to phrase
      ^ %WordInstanceLink($var0,$sent)  ; $var0 and $var1 must be
      ^ %WordInstanceLink($var1,$sent)  ; in the same sentence
      THEN ^3_$phrase($var2, $var1) 

; Note that the above rule is "reversed", in that, if the prep was
; dropped, it loooks like a backwards IsA statement.

; Sentence: "The color of the sky is blue."
; var0=blue, var1=color, var2=sky  $prep=of
# IF _predadj($var1,$var0)
      ^ $prep($var1,$var2)              ; preposition 
      ^ %LemmaLink($var1,$word1)        ; word of word instance
      ^ $phrase($word1, $prep)          ; convert to phrase
      THEN ^3_$phrase($var2, $var0) 

; Sentence: "Pottery is made from clay."
; var0=make  var1=pottery var2=clay  prep=from
# IF _obj($var0,$var1)
      ^ $prep($var0,$var2)              ; preposition 
      ^ %LemmaLink($var0,$word0)        ; word of word instance
      ^ $phrase($word0, $prep)          ; convert to phrase
      THEN ^3_$phrase($var2, $var1) 

; Sentence: "Yarn is made of fibers."
; var1=yarn  var2=fibers  phinst=made_of
# IF _obj($phinst,$var1) ^ _iobj($phinst,$var2)
      ^ %LemmaLink($phinst,$phrase)     ; word of word instance
      THEN ^3_$phrase($var2, $var1) 


; Sentence: "The heart is in the chest." also, "The garage is behind the house"
; var1=heart  var2=chest phinst=in
# IF _psubj($phinst,$var1) ^ _pobj($phinst,$var2)
      ^ $prep(_%copula, $phinst)
      ^ %LemmaLink($phinst, $prword)
      ^ %ListLink($prep,$prword)
      THEN ^3_$prep($var2, $var1) 

; Sentence "Berlin is a city"
; var1=Berlin var2=city
; Must be careful not to make the pattern too simple, as, for example,
; "the captial of Germany is Berlin", the prep is crucial to reversing
; the order of the subject and object! Alternately, demand that $var2
; is indefinite.
# IF _subj(be, $var1) ^ _obj(be, $var2)
      ^ !DEFINITE-FLAG($var2)           ; accept "a city" but not "the city"
      ^ %WordInstanceLink($var1,$sent)  ; $var1 and $var2 must be
      ^ %WordInstanceLink($var2,$sent)  ; in the same sentence
      THEN ^3_isa($var2, $var1) 

; Sentence "Men are mortal"
; var1=mortal var2=men
; Must reject prepositions, so that "the color (of the sky) is blue." 
; is rejected.
; XXX This fails in 'real life', since $prep($var2,$var3) matches
; to LinkGrammarRelationshipNode's which cause a reject to happen.
# IF _predadj($var2, $var1) 
      ^ ! $prep($var2,$var3)
      ^ %WordInstanceLink($var1,$sent)  ; $var1 and $var2 must be
      ^ %WordInstanceLink($var2,$sent)  ; in the same sentence
      THEN ^3_isa($var1, $var2)

; Sentence "The color (of the sky) is blue."
; if the prep is present, then reverse the order.
; var1=blue var2=color
# IF _predadj($var2, $var1) 
      ^ $prep($var2,$var3)
      ^ %WordInstanceLink($var1,$sent)  ; $var1 and $var2 must be
      ^ %WordInstanceLink($var2,$sent)  ; in the same sentence
      THEN ^3_isa($var2, $var1)

; Sentence: "Berlin is in Germany", alternate parse
; (This becomes the dominant parse for "Berlin is a city in Germany").
; var1=Berlin var2=Germany $prep=in
; However, this can't work if defined as simply as this: there are
; too many bogus matches for 'prep'.
;# IF _subj(be, $var1) ^ $prep(be, $var2)
;      ^ %WordInstanceLink($var1,$sent)  ; $var1 and $var2 must be
;      ^ %WordInstanceLink($var2,$sent)  ; in the same sentence
;      THEN ^3_$prep($var2, $var1) 

