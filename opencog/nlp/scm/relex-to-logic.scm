
(define (check-lemma word win)
	(equal? word (cog-name (list-ref (cog-chase-link 'LemmaLink 'WordNode win) 0)))
)

define (get-instance-name word word-index parse-node)
	(define win-list (cog-get-reference parse-node))
	(cog-name (list-ref 
			(append-map (lambda (a-predicate a-win) (if a-predicate (list a-win) '()))
				(map (lambda (a-win) (check-lemma word a-win)) win-list)
				win-list
			)
			(- word-index 1)
		)
	)
)

(define (amod-rule concept instance adj adj_instance)
	(define new_concept (ConceptNode instance))
	(define new_concept_adj (ConceptNode adj_instance))
	(define adj_node (ConceptNode adj))
	(define concept_node (ConceptNode concept))
	(InheritanceLink  new_concept_adj adj_node)
	(InheritanceLink  new_concept new_concept_adj)
	(InheritanceLink  new_concept concept_node)
)

(define (advmod-rule verb instance adv adv_instance) 
	(define new_predicate (PredicateNode instance)) 
	(define new_predicate_adv (ConceptNode adv_instance)) 
	(define adv_node (ConceptNode adv)) 
	(define verb_node (PredicateNode verb)) 	
	(InheritanceLink  new_predicate_adv adv_node) 
	(InheritanceLink  new_predicate new_predicate_adv) 
	(InheritanceLink  new_predicate verb_node) 
)

(define (tense-rule verb instance tense) 
	(define new_predicate (PredicateNode instance)) 
	(define verb_node (PredicateNode verb)) 
	(define tense_node (ConceptNode tense)) 
	(InheritanceLink new_predicate verb_node) 
	(InheritanceLink new_predicate tense_node) 
)

(define (those-rule concept instance var_name) 
	(define new_instance (ConceptNode instance)) 
	(define var (VariableNode var_name)) 
	(define new_concept (ConceptNode concept)) 
	(ImplicationLink 
		(MemberLink var new_instance) 
		(InheritanceLink var new_concept) 
	) 
)

(define (negative-rule verb instance) 
	(define new_predicate (PredicateNode instance)) 
	(define verb_node (PredicateNode verb)) 
	(AndLink
		(InheritanceLink new_predicate verb_node) 
		(NotLink new_predicate)
	) 
)

(define (possessive-rule-1 noun noun_instance word)
	(define new_concept (ConceptNode noun_instance))
	(define concept (ConceptNode noun))
	(define special_concept (ConceptNode word))
	(InheritanceLink new_concept concept)
	(PossessionLink new_concept special_concept)
)

(define (comparative-rule w1 w1_instance w2 w2_instance adj adj_instance)
	(define new_concept_1 (ConceptNode w1_instance))
	(define new_concept_2 (ConceptNode w2_instance))
	(define word_node_1 (ConceptNode w1))
	(define word_node_2 (ConceptNode w2))
	(define adj_node (ConceptNode adj))
	(define new_adj_node (ConceptNode adj_instance))
	(InheritanceLink new_adj_node adj_node)
	(InheritanceLink new_concept_1 word_node_1)
	(InheritanceLink new_concept_2 word_node_2)
	(TruthValueGreaterThanLink
		(InheritanceLink new_concept_1 new_adj_node)
		(InheritanceLink new_concept_2 new_adj_node)
	)
)

(define (number-rule noun noun_instance num num_instance) 
	(define noun_concept (ConceptNode noun)) 
	(define num_node (NumberNode num)) 
	(define noun_ins_concept (ConceptNode noun_instance)) 
	(define num_ins_node (NumberNode num_instance)) 
	(InheritanceLink  noun_ins_concept noun_concept) 
	(InheritanceLink  num_ins_node num_node) 
	(QuantityLink  noun_ins_concept, num_ins_node) 
)

(define (on-rule w1 w1_instance w2 w2_instance)
	(define On (PredicateNode “On”))
	(define new_concept_1 (ConceptNode w1_instance))
	(define new_concept_2 (ConceptNode w2_instance))
	(define word_node_1 (ConceptNode w1))
	(define word_node_2 (ConceptNode w2))
	(InheritanceLink new_concept_1 word_node_1)
	(InheritanceLink new_concept_2 word_node_2)
	(EvaluationLink On new_concept_1 new_concept_2)
)

(define (to-do-rule-1 v1 v1_instance v2 v2_instance s s_instance o o_instance) 
	(define predicateNode_1 (PredicateNode v1)) 
	(define predicateNode_1_ins (PredicateNode v1_instance)) 
	(define predicateNode_2 (PredicateNode v2)) 
	(define predicateNode_2_ins (PredicateNode v2_instance)) 
	(define subjectNode_ins (ConceptNode s_instance)) 
	(define objectNode_ins (ConceptNode o_instance)) 
	(define subjectNode (ConceptNode s)) 
	(define objectNode (ConceptNode o)) 
	(InheritanceLink subjectNode_ins subjectNode) 
	(InheritanceLink objectNode_ins objectNode) 
	(InheritanceLink predicateNode_1_ins predicateNode_1) 
	(InheritanceLink predicateNode_2_ins predicateNode_2) 
	(EvaluationLink predicateNode_1_ins subjectNode_ins)
	(EvaluationLink predicateNode_2_ins subjectNode_ins objectNode_ins)
)

(define (to-do-rule-2 v1 v1_instance v2 v2_instance s1 s1_instance s2 s2_instance o o_instance) 
	(define predicateNode_1 (PredicateNode v1)) 
	(define predicateNode_1_ins (PredicateNode v1_instance)) 
	(define predicateNode_2 (PredicateNode v2)) 
	(define predicateNode_2_ins (PredicateNode v2_instance)) 
	(define subjectNode_1_ins (ConceptNode s1_instance)) 
	(define subjectNode_2_ins (ConceptNode s2_instance)) 
	(define objectNode_ins (ConceptNode o_instance)) 
	(define subjectNode_1 (ConceptNode s1)) 
	(define subjectNode_2 (ConceptNode s2)) 
	(define objectNode (ConceptNode o)) 
	(InheritanceLink subjectNode_1_ins subjectNode_1) 
	(InheritanceLink subjectNode_2_ins subjectNode_2) 
	(InheritanceLink objectNode_ins objectNode) 
	(InheritanceLink predicateNode_1_ins predicateNode_1) 
	(InheritanceLink predicateNode_2_ins predicateNode_2) 
	(EvaluationLink predicateNode_1_ins subjectNode_1_ins)
	(EvaluationLink predicateNode_2_ins subjectNode_2_ins objectNode_ins))
)

(define (to-be-rule verb verb_ins adj adj_ins subj subj_ins)
	(define predicateNode_ins (PredicateNode verb_ins))
	(define predicateNode (PredicateNode verb))
	(define subjNode_ins (ConceptNode subj_ins))
	(define subjNode (ConceptNode subj))
	(define adjNode_ins (ConceptNode adj_ins))
	(define adjNode (ConceptNode adj))
	(InheritanceLink predicateNode_ins predicateNode)
	(InheritanceLink subjNode_ins subjNode)
	(InheritanceLink adjNode_ins adjNode)
	(EvaluationLink predicateNode_ins)
	(InheritanceLink subjNode_ins adjNode_ins))
)

(define (all-rule noun  noun_instance)
	(define concept (ConceptNode noun))
	(define concept_ins (ConceptNode noun_instance))
	(ForAllLink concept_ins
		(InheritanceLink concept_ins concept)
	)
)

(define (entity-rule word word_instance) 
	(define entity (SpecificEntityNode word_instance)) 
	(define concept_node (ConceptNode word)) 
	(InheritanceLink entity concept_node) 
)

(define (man-rule word word_instance)
	(define entity (SpecificEntityNode word_instance))
	(define Person (ConceptNode "person"))
	(define Man (ConceptNode "man"))
	(define concept_node (ConceptNode word))
	(InheritanceLink entity concept_node)
	(InheritanceLink entity Person)
	(InheritanceLink entity Man)
)

(define (woman-rule word word_instance)
	(define entity (SpecificEntityNode word_instance))
	(define Person (ConceptNode "person"))
	(define Woman (ConceptNode "woman"))
	(define concept_node (ConceptNode word))
	(InheritanceLink entity concept_node)
	(InheritanceLink entity Person)
	(InheritanceLink entity Woman) 
)



(define (about-rule verb verb_instance  noun noun_instance) 
	(define new_predicate (PredicateNode verb_instance)) 
	(define verb_node (PredicateNode verb)) 
	(define About (PredicateNode "about")) 
	(define new_concept (ConceptNode noun_instance)) 
	(define concept_node (ConceptNode noun)) 
	(InheritanceLink new_predicate verb_node) 
	(InheritanceLink new_concept concept_node) 
	(EvaluationLink About new_predicate new_concept) 
) 


(define (nn-rule n1 n1_instance n2 n2_instance) 
	(define n1_concept (ConceptNode n1)) 
	(define n2_concept (ConceptNode n2)) 
	(define n1_ins_concept (ConceptNode n1_instance)) 
	(define n2_ins_concept (ConceptNode n2_instance)) 
	(InheritanceLink  n1_ins_concept n1_concept) 
	(InheritanceLink  n2_ins_concept n2_concept) 
	(InheritanceLink  n1_ins_concept, n2_ins_concept) 
) 
