
                       La Cogita Chatbot
                       -----------------
                Linas Vepstas <linasvepstas@gmail.com>
                          April 2009

A quick-n-dirty hookup of the opencog internals to an IRC-based chatbot.

Currently, the bot is simply a protocol translator from the IRC protocol,
to opencog i/o. It is subject to change.

Configuring: 
-----------
There is an assortment of hard-coded configuration stuff in the source
code.  See go-irc.c for setable values for the name of the chatbot, the
irc channel and irc network to join, and the bot ID strings, etc.

By default, it connects to the #opencog channel on freenode.net.

The bot tries to connect to an opencog server at port 17004. This port 
number is hard-coded in whirr-sockets.cc.

Running:
--------
After modifying the hard-coded config as desired, start the bot by 
saying "opencog/nlp/chatbot/cogita". It should then appear on the IRC
channel. You can then talk to it by addressing it by name, i.e. 
prefacing comments with cog:, cogita: or cogita-bot:

To have it do something, you must have an opencog server running on
port 17004, and have the opencog server appropriately loaded up with
assorted databses, code, etc.

You also have to have the latest version of RelEx installed, and then
run ./opencog-server.sh from the main RelEx directory. This will create
a parse server on port 4444: it will read plain-text input, and generate
parsed text in opencog format.  The chatbot needs this server to process
text.

This is most easiloy done by starting the cogserver using the 
lib/opencog4.conf configuration file, which sets the correct port,
silences the opencog prompt, and loads the needed scheme files.

Architecture:
-------------
The current architecture makes use of several servers interconnected
by TCP/IP sockets to perform NLP processing.  The infrastructure is
currently very minimalistic, and is just barely enough to get the job
done. All modifications require tampering the source code. The pipeline
is as follows:

1) IRC I/O, performed by cogita, which acts as a intermediary between
   IRC and OpenCog.  It listens for input on an IRC channel, and 
   forwards the resulting plain-text to opencog. This is done by
   issuing one simple scheme expression to opencog, via the opencog
   command-line interface/scheme shell on port 17004. The expression 
   is ''(say-id-english usernick text)'', where the ''usernick'' is 
   the user's IRC nick, and ''text'' is what the user entered.  The
   return value from this command is sent back to the IRC channel.
   Communications is stateless and blocking: cogita closes the socket
   to indeicate end-of-messsage, and expects that the cog server will
   to the same. Only after the cog-server closes its socket does cogita
   reply on the IRC channel.

   IRC.cc,.h:  C++ cl;ass for generic IRC communications.
   go-irc.cc:  the main guts of the cogita server
   whirr-sockets.cc,.h: tcp socket to send data to opencog, get reply.  

2) Parsing of english text by RelEx. The very first thing that the 
   ''say-id-english'' routine does is to send the input text to RelEx
   for parsing.  This is done by sending the plain-text via a socket
   to a listening RelEx server; the server responds with the parsed
   text, in the form of a hypergraph of atoms expressed in scheme. 
   The hypergraph is then loaded into the opencog atomspace, and is
   ready for processing. 

   I/O to parser is stateless: RelEx will close the socket after it has
   completed its parse and returned its results.

3) Question-Answering (not yet hooked up)

4) NLgen (not yet hooked up)



